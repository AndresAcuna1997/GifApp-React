{"version":3,"sources":["componentes/AddCategeria.js","componentes/GifGridItem.js","helpers/getGifts.js","componentes/GifGrid.js","GifExpertApp.js","reportWebVitals.js","index.js"],"names":["AddCategeria","setCategorias","setLimite","limit","useState","inputValue","setinputValue","handleEnter","e","preventDefault","trim","length","cats","className","onSubmit","type","value","onChange","texto","target","onClick","number","GifGridItem","titulo","url","src","alt","getGifs","categoria","a","limite","encodeURI","fetch","respuesta","json","data","dataGifs","map","informacion","id","title","images","downsized_medium","propTypes","PropTypes","string","isRequired","GifGrid","category","setImages","useEffect","then","arregloVacio","GifExpertApp","categorias","setLimit","console","log","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.43275b10.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\n\r\n\r\nconst AddCategeria = ({setCategorias , setLimite,  limit }) => {\r\n\r\n    const [inputValue, setinputValue] = useState('Ingrese una categoria');\r\n\r\n    const handleInputText = ( texto ) =>{\r\n        setinputValue(texto.target.value);\r\n    }\r\n\r\n    const handleInputValue = ( number ) =>{\r\n        setLimite(number.target.value);\r\n    }\r\n\r\n    const vaciarTextInput = ( ) =>{\r\n        if(inputValue === 'Ingrese una categoria'){\r\n            setinputValue('');\r\n        }   \r\n    }\r\n\r\n    const handleEnter = ( e ) =>{\r\n         e.preventDefault();\r\n         if(inputValue.trim().length > 2){\r\n            setCategorias( cats => [inputValue,...cats] ); //Toma el ultimo del arreglo por que no lo llame\r\n            setinputValue('');\r\n         }\r\n\r\n    }\r\n    return (\r\n        <>\r\n        <div className='subtitulo'>\r\n            <h2>AÃ±adir categoria</h2>\r\n        </div>\r\n        <form onSubmit={ handleEnter }>\r\n        <input type='text' value= { inputValue } onChange={ handleInputText } onClick={ vaciarTextInput }></input>\r\n        <input type='number' value={ limit } onChange={ handleInputValue }></input>\r\n        <button onClick={ handleEnter }>Buscar</button>\r\n        </form>\r\n        </>\r\n    )\r\n}\r\n\r\nAddCategeria.propTypes = {\r\n    setCategorias: PropTypes.func.isRequired\r\n}\r\n\r\nexport default AddCategeria\r\n","import React from 'react'\r\n\r\nconst GifGridItem = ({titulo, url}) => {\r\n\r\n    return (\r\n        <div className='card animate__animated animate__fadeInUpBig'>\r\n            <img src={url} alt={titulo}></img>\r\n            <p>{titulo}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GifGridItem\r\n","import PropTypes from 'prop-types'\r\n\r\nexport const getGifs = async( categoria, limite=10 )=>{\r\n\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(categoria)}&limit=${limite}&api_key=wUxOguEmuPHpvAucLQH4icPeyeKhk2Hd`;\r\n\r\n    const respuesta = await fetch( url );\r\n    const { data } = await respuesta.json();\r\n    \r\n    const dataGifs = data.map( informacion => {\r\n        return{\r\n            id:informacion.id,\r\n            titulo:informacion.title,\r\n            url:informacion.images?.downsized_medium.url\r\n        }\r\n    })\r\n\r\n    return dataGifs;\r\n}\r\n\r\ngetGifs.propTypes = {\r\n    categoria: PropTypes.string.isRequired,\r\n    limite:PropTypes.number\r\n}\r\n","import React, { useEffect } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { useState } from 'react'\r\nimport GifGridItem from './GifGridItem';\r\nimport { getGifs } from '../helpers/getGifts';\r\n\r\nconst GifGrid = ({category, limit }) => {\r\n\r\n    const [images, setImages] = useState([]);\r\n\r\n    const arregloVacio = (categoria)=>{\r\n        if(categoria == ''){\r\n            return (\r\n                <div className='categoria_Vacia_msg'>\r\n                    <h3>Ingresa una categoria para buscar gifs</h3>\r\n                </div>\r\n                )\r\n        }\r\n    };\r\n    useEffect(() => {\r\n        getGifs( category, limit ).then(images =>setImages(images));\r\n    }, [ category ])\r\n    \r\n\r\n\r\n    return (\r\n        <>\r\n        \r\n        <h3 className=' titulo__categoria animate__animated animate__fadeInUpBig'>{ category }</h3>\r\n         { arregloVacio(category)}\r\n        <div className='centrar'>  \r\n            <div className='card-grid'>\r\n                {\r\n                    images.map( images=> (  // Map no me lee los {} no los use\r\n                        <GifGridItem  key={images.id} {...images}/>\r\n                    ))\r\n                }\r\n            </div> \r\n        </div>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default GifGrid\r\n","import React, { useState } from 'react'\r\nimport AddCategeria from './componentes/AddCategeria'\r\nimport GifGrid from './componentes/GifGrid'\r\n\r\n\r\n\r\nconst GifExpertApp = () => {\r\n\r\n    const [categorias, setCategorias] = useState(['Rock']);\r\n    const [limit, setLimit] = useState(9);\r\n\r\n    /*   const handleAdd = () =>{\r\n           setCategorias([...categorias, 'K-Pop']);\r\n       }  */\r\n\r\n    console.log(limit);\r\n    return (\r\n        <>\r\n        <div className='primeraSeccion'>\r\n            <h1>Gif Expert App</h1>\r\n            <AddCategeria categorias={categorias} limit={limit} setCategorias={setCategorias} setLimite={setLimit} /> \r\n        </div>\r\n            <ul>\r\n                {\r\n                    categorias.map((categoria) => {\r\n                        console.log(limit)\r\n                        return (                            // Doble parentesis o no renderiza\r\n                            <GifGrid key={categoria} category={categoria} limit={ limit }/>\r\n                        )\r\n                    })\r\n                }\r\n            </ul>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nexport default GifExpertApp\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}